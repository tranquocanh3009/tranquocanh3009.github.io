{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bank","keyCode","keyTrigger","id","url","padInactiveStyle","backgroundColor","padActiveStyle","boxShadow","myInterVal","DrumPad","props","state","padStatus","handleKeyPress","bind","playSound","document","addEventListener","this","removeEventListener","event","sound","getElementById","currentTime","activatePad","play","setInterval","console","log","updateDisplay","clipId","setState","clearInterval","onClick","className","style","src","clip","React","Component","PadBank","power","padBankResult","map","item","class","App","display","name","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mNAKMA,G,YAAO,CACX,CACEC,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,2DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,2DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,2DACJ,CACHH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACH,CACFH,QAAS,GACTC,WAAY,IACZC,GAAI,SACJC,IAAK,mEACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,2DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,YACJC,IAAK,0DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,0DACH,CACFH,QAAS,GACTC,WAAY,IACZC,GAAI,cACJC,IAAK,iEACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,aACJC,IAAK,gEACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,QACJC,IAAK,2DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,cACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,YACJC,IAAK,4DAGDC,EAAmB,CACvBC,gBAAiB,mBAGbC,EAAiB,CACrBD,gBAAiB,oBACjBE,UAAW,0BAGTC,EAAa,GAEXC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAWR,GAEb,EAAKS,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBANA,E,iFAUjBE,SAASC,iBAAiB,UAAWC,KAAKL,kB,6CAI1CG,SAASG,oBAAoB,UAAWD,KAAKL,kB,qCAGhCO,GACTF,KAAKR,MAAMV,UAAYoB,EAAMpB,SAC/BkB,KAAKH,c,kCAIP,IAAMM,EAAQL,SAASM,eAAeJ,KAAKR,MAAMT,YACjDoB,EAAME,YAAc,EAEpBL,KAAKM,cACDN,KAAKP,MAAMC,YAAcR,IAC3BiB,EAAMI,OACNjB,EAAWU,KAAKR,MAAMV,SAAW0B,aAAY,kBAAML,EAAMI,SAAQ,MAEnEE,QAAQC,IAAIpB,EAAWU,KAAKR,MAAMV,UAClCkB,KAAKR,MAAMmB,cAAcX,KAAKR,MAAMoB,U,oCAGhCZ,KAAKP,MAAMC,YAAcR,GAC3Bc,KAAKa,SAAS,CACZnB,UAAWN,IAEb0B,cAAcxB,EAAWU,KAAKR,MAAMV,YAGpCkB,KAAKa,SAAS,CACZnB,UAAWR,IAEb4B,cAAcxB,EAAWU,KAAKR,MAAMV,a,+BAItC,OACE,yBAAME,GAAIgB,KAAKR,MAAMoB,OACfG,QAASf,KAAKH,UACdmB,UAAU,WACVC,MAAOjB,KAAKP,MAAMC,WAChB,2BAAOsB,UAAU,OAAOhC,GAAIgB,KAAKR,MAAMT,WAAYmC,IAAKlB,KAAKR,MAAM2B,Y,GAvD3DC,IAAMC,WA8DtBC,E,YACJ,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX8B,OAAO,GAHQ,E,sEAMT,IAAD,OACDC,EAAgB3C,EAAK4C,KAAI,SAAAC,GAAI,OAC/B,kBAAC,EAAD,CACEd,OAAQc,EAAK1C,GACbmC,KAAMO,EAAKzC,IACXF,WAAY2C,EAAK3C,WACjBD,QAAS4C,EAAK5C,QACd6B,cAAe,EAAKnB,MAAMmB,mBAGhC,OACE,yBAAKgB,MAAM,kBACRH,O,GAnBaJ,IAAMC,WAoDbO,E,YA1Bb,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXoC,QAAS,IAEX,EAAKlB,cAAgB,EAAKA,cAAcf,KAAnB,gBALJ,E,2EAOLkC,GACZ9B,KAAKa,SAAS,CACZgB,QAASC,M,+BAIX,OACE,yBAAKH,MAAM,YAAY3C,GAAG,gBACxB,kBAAC,EAAD,CACE2B,cAAeX,KAAKW,gBACtB,yBAAKgB,MAAM,OAAO3C,GAAG,WACnB,8BAAOgB,KAAKP,MAAMoC,e,GAnBVT,IAAMC,WCxLJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASM,eAAe,SD6H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.b36b14a6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { render } from '@testing-library/react';\n\n// coded by @no-stack-dub-sack (github) / @no_stack_sub_sack (codepen)\nconst bank = [\n  {\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Chord-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Chord-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Chord-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n  }, {\n  keyCode: 82,\n  keyTrigger: 'R',\n  id: 'Heater-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 84,\n  keyTrigger: 'T',\n  id: 'Heater-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 89,\n  keyTrigger: 'Y',\n  id: 'Heater-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n},  {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Shaker',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n  keyCode: 70,\n  keyTrigger: 'F',\n  id: 'Heater-4',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 71,\n  keyTrigger: 'G',\n  id: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 72,\n  keyTrigger: 'H',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n},  {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: 'Punchy-Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Side-Stick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Snare',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}, {\n  keyCode: 86,\n  keyTrigger: 'V',\n  id: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 66,\n  keyTrigger: 'B',\n  id: 'Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 78,\n  keyTrigger: 'N',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n}];\n\nconst padInactiveStyle = {\n  backgroundColor: \"rgb(32, 32, 32)\"\n}\n\nconst padActiveStyle = {\n  backgroundColor: \"rgb(72, 221, 221)\",\n  boxShadow: \"0px 0px 10px 0px white\"\n}\n\nvar myInterVal = [];\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      padStatus: padInactiveStyle\n    }\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.playSound = this.playSound.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n  \n  handleKeyPress(event) {\n    if (this.props.keyCode === event.keyCode) {\n      this.playSound();\n    }\n  }\n  playSound() {\n    const sound = document.getElementById(this.props.keyTrigger);\n    sound.currentTime = 0;\n    \n    this.activatePad();\n    if (this.state.padStatus === padInactiveStyle) {\n      sound.play();\n      myInterVal[this.props.keyCode] = setInterval(() => sound.play(), 3000);\n    }\n    console.log(myInterVal[this.props.keyCode]);\n    this.props.updateDisplay(this.props.clipId)\n  }\n  activatePad() {\n    if (this.state.padStatus === padInactiveStyle) {\n      this.setState({\n        padStatus: padActiveStyle\n      });\n      clearInterval(myInterVal[this.props.keyCode]);\n    }\n    else {\n      this.setState({\n        padStatus: padInactiveStyle\n      });\n      clearInterval(myInterVal[this.props.keyCode]);\n    }\n  }\n  render() {\n    return(\n      <div  id={this.props.clipId}\n            onClick={this.playSound}\n            className=\"drum-pad\"\n            style={this.state.padStatus}>\n              <audio className=\"clip\" id={this.props.keyTrigger} src={this.props.clip}></audio>\n              \n      </div>\n    );\n  }\n}\n\nclass PadBank extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      power: false\n    }\n  }\n  render() {\n    const padBankResult = bank.map(item => \n        <DrumPad \n          clipId={item.id}\n          clip={item.url}\n          keyTrigger={item.keyTrigger}\n          keyCode={item.keyCode}\n          updateDisplay={this.props.updateDisplay}/>\n    )\n\n    return(\n      <div class=\"drum-container\">\n        {padBankResult}\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: ''\n    }\n    this.updateDisplay = this.updateDisplay.bind(this)\n  }\n  updateDisplay(name) {\n    this.setState({\n      display: name\n    })\n  }\n  render() {\n    return(\n      <div class=\"container\" id=\"drum-machine\">\n        <PadBank\n          updateDisplay={this.updateDisplay}/>\n        <div class=\"info\" id=\"display\">\n          <span>{this.state.display}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}