{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","butts","class","text","id","Button","React","Component","props","state","handleClick","bind","this","click","result","buttClass","className","buttId","onClick","Keyboard","map","item","hasOwnProperty","updateDisplay","App","input","output","char","setState","toString","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e581cec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst butts = [\n  {\n    class: \"jumbo\",\n    text: \"C\",\n    id: \"ace\"\n  }, {\n    text: \"/\",\n    id: \"divide\"\n  }, {\n    text: \"*\",\n    id: \"multiply\"\n  }, {\n    class: \"number\",\n    text: 7,\n    id: \"seven\"\n  }, {\n    class: \"number\",\n    text: 8,\n    id: \"eight\"\n  }, {\n    class: \"number\",\n    text: 9,\n    id: \"three\"\n  }, {\n    text: \"-\",\n    id: \"subtract\"\n  }, {\n    class: \"number\",\n    text: 4,\n    id: \"four\"\n  }, {\n    class: \"number\",\n    text: 5,\n    id: \"five\"\n  }, {\n    class: \"number\",\n    text: 6,\n    id: \"six\"\n  }, {\n    text: \"+\",\n    id: \"add\"\n  }, {\n    class: \"number\",\n    text: 1,\n    id: \"one\"\n  }, {\n    class: \"number\",\n    text: 2,\n    id: \"two\"\n  },\n  {\n    class: \"number\",\n    text: 3,\n    id: \"three\"\n  }, {\n    class: \"number jumbo\",\n    text: 0,\n    id: \"zero\"\n  }, {\n    class: \"number\",\n    text: \".\",\n    id: \"decimal\"\n  },  {\n    text: \"=\",\n    id: \"equal\"\n  }\n];\n\nclass Screen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      output: ''\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"output\">{this.props.output}</div>\n        <div id=\"input\">0</div>\n      </div>\n    )\n  }\n}\n\nclass Button extends React.Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.click(this.props.text)\n  }\n\n  render() {\n    const result = (typeof this.props.buttClass == 'string') ? \n                      <button className={this.props.buttClass}\n                        id={this.props.buttId}\n                        onClick={this.handleClick}>\n                                {this.props.text}\n                      </button>\n                      : <button id={this.props.buttId}\n                        onClick={this.handleClick}>\n                                {this.props.text}\n                    </button>\n    return (\n      <span>\n        {result}\n      </span>\n    )\n  }\n\n}\n\nclass Keyboard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const result = butts.map(item => {\n      if (item.hasOwnProperty('class')) {\n        return <Button buttClass={item.class} buttId={item.id} text={item.text} click={this.props.updateDisplay}></Button>\n      }\n      else {\n        return <Button buttId={item.id} text={item.text} click={this.props.updateDisplay}></Button>\n      }\n    })\n    return(\n      <div>\n        {result}\n      </div>\n    )\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '0',\n      output: ''\n    }\n    this.updateDisplay = this.updateDisplay.bind(this);\n  }\n  updateDisplay(char) {\n    if (char == 'C') {\n      this.setState({\n        input: '0',\n        output: ''\n      })\n    }\n    else {\n      this.setState({\n        input: char,\n        output: this.state.output + char.toString()\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <div className=\"data-reactroot\">\n            <div class=\"calculator\">\n              <div id=\"output\">{this.state.output}</div>\n              <div id=\"input\">{this.state.input}</div>\n              <Keyboard updateDisplay={this.updateDisplay}/>\n            </div>\n            <p>Coded by <a href=\"https://fb.com/tranquocanh2000\" target=\"_blank\">Tran Quoc Anh</a></p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}